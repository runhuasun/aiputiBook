import { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import React from 'react';
import { useSession, signIn } from "next-auth/react";
import useSWR from "swr";
import { Rings } from "react-loader-spinner";
import Link from "next/link";
import { useRouter } from "next/router";
import { Toaster, toast } from "react-hot-toast";
import { Room } from "@prisma/client";
import { getServerSession } from "next-auth";
import TextareaAutosize from "react-textarea-autosize";

import { authOptions } from "../pages/api/auth/[...nextauth]";
import prisma from "../lib/prismadb";
import {ZipData} from "./api/processImage";
import { GenerateResponseData } from "./api/generate";

import { CompareSlider } from "../components/CompareSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import ResizablePanel from "../components/ResizablePanel";
import Toggle from "../components/Toggle";
import { showModel} from "../components/Genhis";
import LoginPage from "../components/LoginPage";
import LoadingDots from "../components/LoadingDots";
import LoadingRing from "../components/LoadingRing";
import DropDown from "../components/DropDown";
import Uploader, {mimeTypes} from "../components/Uploader";
import ComboSelector from "../components/ComboSelector";
import ImageCanvas from "../components/ImageCanvas";
import ModelSelector from "../components/ModelSelector";
import PriceTag from "../components/PriceTag";
import LoadingButton from "../components/LoadingButton";
import MessageZone from "../components/MessageZone";
import StartButton from "../components/StartButton";
import ResultButtons from "../components/ResultButtons";
import AutoSizeImage from "../components/AutoSizeImage";
import FormLabel from "../components/FormLabel";
import PromptArea from "../components/PromptArea";
import MaskImageEditor, {extractMaskImage} from "../components/MaskImageEditor";

import * as ru from "../utils/restUtils";
import { config } from "../utils/config";
import * as debug from "../utils/debug";
import {callAPI2} from "../utils/apiUtils";
import * as fu from "../utils/fileUtils";
import * as rmu from "../utils/roomUtils";
import * as monitor from "../utils/monitor";



export default function inpaintGPT({ simRoomBody, defaultImage,  config }: { simRoomBody:any, defaultImage: Room, config:any }) {

    const [sideBySide, setSideBySide] = useState<boolean>(false);
    const [loading, setLoading] = useState<boolean>(false);
    const [restoredLoaded, setRestoredLoaded] = useState<boolean>(!!simRoomBody);
    const [error, setError] = useState<string | null>(null);
    const [restoredImage, setRestoredImage] = useState<string | null>(simRoomBody?.output);
    const [restoredId, setRestoredId] = useState<string | null>(simRoomBody?.roomId);
    
    const [image, setImage] = useState<string>(simRoomBody?.params?.params?.image || "");
    const [prompt, setPrompt] = useState(simRoomBody?.params?.params?.prompt || "");

    const router = useRouter();
    const [preRoomId, setPreRoomId] = useState<string | null>(router?.query?.roomId as string);

    const fetcher = (url: string) => fetch(url).then((res) => res.json());
    const { data, mutate } = useSWR("/api/remaining", fetcher);
    const { data: session, status } = useSession();
    const [title, setTitle] = useState<string>(router.query.title as string || "chatGPT图片编辑");
    const [maskCanvas, setMaskCanvas] = useState<any>();

    useEffect(() => {
        if(defaultImage?.outputImage){
            fu.aliyunImageRestrictResize(defaultImage.outputImage).then((result)=>{
                if(result){
                    setImage(result);
                }
            });
        }else{
            setImage("");
        }
    }, []); // 空数组表示只在组件挂载时执行一次
    
    
    async function generate() {
        setLoading(true);
        if(!image){
            setLoading(false);
            return alert("请先选择或上传一张照片！");
        }
        if(!prompt){
            setLoading(false);
            return alert("请告诉我修复区域的内容！");
        }

        if(!maskCanvas){
            return alert("请先在原始图片上选择一个修改区域");
        }
        
        const res = await callAPI2(
            "/api/workflowAgent2", 
            {
                cmd:"inpaintGPT", 
                preRoomId,
                params:{
                    func:"gpt-image-1-edit",
                    imageURLs:[image],
                    maskImage: extractMaskImage(maskCanvas, "ALPHA"),
                    prompt                    
                }
            },
            title,
            "IMAGE",
            (status:boolean)=>{setLoading(status)},
            (res:any)=>{
               mutate();
               setRestoredImage(res.result?.generated);
               setRestoredId(res.result?.genRoomId);                                      
            },
            (res:any)=>{
                return false;
            }
        );                    
    }


    let num = 1;

    if(status == "authenticated" || status == "unauthenticated"){
        
        return (
            <div className="flex flex-col items-center justify-center bg-loraLab min-h-screen">
                <Head>
                    <title>{title}</title>
                </Head>                
                <Header config={config} title={title}/>
                
                <main>
                    <div className="w-full flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0 items-start justify-between p-2 mt-2">

                        <div className="flex w-full sm:flex-1 flex-col rounded-lg min-h-lvh mr-2 items-center justify-start border border-1 border-gray-300 border-dashed">
                            <div className={`${restoredLoaded ? "mt-6 -ml-8" : "hidden"}`}>
                                <Toggle className={`${restoredLoaded ? "mb-6" : "hidden"}`}  sideBySide={sideBySide}
                                    setSideBySide={(newVal) => setSideBySide(newVal)}
                                    />
                            </div>    
                            
                            {restoredLoaded && sideBySide && (
                            <CompareSlider
                                original={image!}
                                restored={restoredImage!}
                                />
                            )}                              

                            {!sideBySide && (
                            <div className={"w-full flex flex-col sm:flex-row space-y-5 sm:space-y-0 sm:space-x-5 justify-center " + (loading ? "items-center" : "items-start") }>
                                <div className="w-full sm:w-1/2 space-y-4 flex flex-col items-center justify-start">
                                    <FormLabel number={`${num++}`} label={"在原片上选择修改区域"}/>
                                    {image && (
                                    <div className="w-full flex flex-col items-center space-y-4 ">
                                        <MaskImageEditor
                                            imageURL={image} maskFormat="ALPHA"
                                            className="rounded-2xl sm:mt-0 mt-2 w-full h-auto"
                                            onMaskUpdate={(maskCanvas)=>{
                                                setMaskCanvas(maskCanvas);
                                            }}
                                            />
                                    </div>
                                    )}
                                    {!loading && (
                                    <div className="w-full max-w-2xl">
                                        <ComboSelector 
                                            onSelectRoom = {async (newRoom) => {
                                                setPreRoomId(newRoom?.id);
                                            }}                                               
                                            onSelect = {async (newFile) => {
                                                const size = await fu.getImageSize(newFile);
                                                if(size.width>2000 || size.height>2000){
                                                    // alert(`上传图片的宽${size.width}像素，高${size.height}。这个尺寸太大了，系统无法进行正确的处理，将自动帮您把图片做缩小处理`);
                                                    newFile = await fu.resizeImage(newFile, 2000);                        
                                                }
                                                setImage(newFile);
                                                setRestoredImage(null);
                                                setRestoredLoaded(false);
                                                setError(null); 
                                            }}
                                            />
                                    </div>
                                    )}
                                </div>                                     

                                <div className={ "w-full sm:w-1/2 space-y-4 flex flex-col justify-start " + (loading ? "items-center" : "items-start") }>                                                
                                    {loading && !error && !restoredImage && (
                                    <LoadingRing/>
                                    )}
                                    
                                    {restoredImage && restoredId && !loading && !error && (
                                    <div className="w-full flex flex-col items-center space-y-4 ">
                                        <FormLabel label="重绘照片"/>
                                        <AutoSizeImage
                                            src={restoredImage}
                                            imageId={restoredId}
                                            onLoadingComplete={() => setRestoredLoaded(true)}
                                            />                                        
                                        {restoredImage && restoredId && (
                                        <ResultButtons inpaintButtton={false} mediaURL={restoredImage} mediaId={restoredId} 
                                            funcName="修改"
                                             onContinue={async () => {
                                                 const size = await fu.getImageSize(restoredImage);
                                                 let newFile = restoredImage;
                                                 if(size.width>2000 || size.height>2000){
                                                     // alert(`上传图片的宽${size.width}像素，高${size.height}。这个尺寸太大了，系统无法进行正确的处理，将自动帮您把图片做缩小处理`);
                                                     const resizedFile = await fu.resizeImage(newFile, 2000);                        
                                                     if(resizedFile){
                                                         newFile = resizedFile;
                                                     }                                                             
                                                 }                                                         
                                                 setImage(newFile);
                                                 setRestoredImage(null);
                                                 setRestoredLoaded(false);
                                                 setError(null);
                                             }}
                                            />
                                        )}
                                    </div>                                                                
                                    )}
                                </div>
                                
                            </div>
                            )}
                            
                            {error && (
                            <MessageZone message={error} messageType="ERROR"/>
                            )}     
    
                        </div>                        
                        

                        
                        <div className="page-tab px-4 ml-2 pb-20 rounded-lg space-y-4 w-full max-w-lg">                        
    
                            <div className="space-y-4 w-full max-w-lg justify-center">
                                <FormLabel number={`${num++}`} label="对原画面修改的内容"/>                                
                                <div className="relative inline-block w-full">
                                    <PromptArea
                                        hotWords="FREE_EDIT"
                                        hasAdvanceButton={false}
                                        userPrompt={prompt}
                                        readOnly={false}
                                        onUserPromptChange={(up) => setPrompt(up) }
                                        />  
                                </div>   
                            </div> 
     
                            <div className= "flex flex-col space-y-2 items-center">
                                {status === "authenticated" && data && (
                                <PriceTag config={config} />
                                )}
                                
                                {loading ? (
                                <LoadingButton/>
                                ):(
                                <StartButton config={config} 
                                    onStart={() => {
                                        setRestoredImage(null);
                                        setRestoredLoaded(false);
                                        setError(null);                      
                                        generate();
                                    }}/>
                                )}
                            </div>

                        </div>

                    </div>                          
            
                </main>
                <Footer />
            </div>
        );
    }else{
        return(
            <LoginPage config={config}/>
        );
    }   
};

    
      
export async function getServerSideProps(ctx: any) {
    monitor.logUserRequest(ctx);
    
    const session = await getServerSession(ctx.req, ctx.res, authOptions);
    let imgId = ctx?.query?.roomId;
    // 如果用户没登录显示最热门的，如果已经登录显示最新的
    const isLogin = session && session.user  && session.user.email ? true : false;
    let defaultImage = null;
    
    if(imgId){
        defaultImage = await prisma.room.findUnique({
            where: {
                id: imgId,
            },
        });
    }
    
    return {
        props: {
            simRoomBody : await rmu.getRoomBody(ctx?.query?.simRoomId),                                    
            defaultImage,
            config
        },
    };
  
}            
