import { AnimatePresence, motion } from "framer-motion";
import { NextPage } from "next";
import Link from "next/link";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import React from 'react';
import { UploadDropzone } from "react-uploader";
import { Uploader, UploadWidgetLocale } from "uploader";
import { CompareSlider } from "../components/CompareSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import LoadingDots from "../components/LoadingDots";
import ResizablePanel from "../components/ResizablePanel";
import Toggle from "../components/Toggle";
import appendNewToName from "../utils/appendNewToName";
import downloadPhoto from "../utils/downloadPhoto";
import DropDown from "../components/DropDown";
import { roomType, rooms, themeType, themes, themeNames, roomNames  } from "../utils/logoDesignTypes";
import { GenerateResponseData } from "./api/generate";
import { useSession, signIn } from "next-auth/react";
import useSWR from "swr";
import { Rings } from "react-loader-spinner";
import { useRouter } from "next/router";
import { log, warn, error } from "../utils/debug";

//  {status === "authenticated" && data && !restoredImage && (

// Configuration for the uploader
const uploader = Uploader({
  apiKey: !!process.env.NEXT_PUBLIC_UPLOAD_API_KEY
    ? process.env.NEXT_PUBLIC_UPLOAD_API_KEY
   : "free",
});

const Home: NextPage = () => {
  const [originalPhoto, setOriginalPhoto] = useState<string | null>(null);
  const [restoredImage, setRestoredImage] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [restoredLoaded, setRestoredLoaded] = useState<boolean>(false);
  const [sideBySide, setSideBySide] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [photoName, setPhotoName] = useState<string | null>(null);
  const [theme, setTheme] = useState<themeType>("Vintage");
  const [room, setRoom] = useState<roomType>("DALL-E");

  const fetcher = (url: string) => fetch(url).then((res) => res.json());
  const { data, mutate } = useSWR("/api/remaining", fetcher);
  const { data: session, status } = useSession();
  const [prompt, setValue] = useState("");
  
  const router = useRouter();
  let tizi = router.query.price;
  
  async function generatePhoto(fileUrl: string) {
    await new Promise((resolve) => setTimeout(resolve, 200));
    setLoading(true);
    const res = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ imageUrl: fileUrl, theme, room, inputText: prompt, func: "logo", price: tizi }),
    });

    let response = (await res.json()) as GenerateResponseData;
    if (res.status !== 200) {
      setError(response as any);
    } else {
      mutate();
      const rooms =
        (JSON.parse(localStorage.getItem("rooms") || "[]") as string[]) || [];
      rooms.push(response.id);
      localStorage.setItem("rooms", JSON.stringify(rooms));
      log("logoDesign gene:" + response.generated);
      setRestoredImage(response.generated);
    }
    setTimeout(() => {
      setLoading(false);
    }, 1300);
  }

  return (
    <div className="flex max-w-6xl mx-auto flex-col items-center justify-center py-2 min-h-screen">
      <Head>
        <title>AI Logo 设计师</title>
      </Head>
      <Header/>
      <main>

        <h1 className="title-main">
          开始让 <span className="title-light">AI</span> 帮你设计LOGO
        </h1>
          {1 === 1 && data && !restoredImage && (
          <p className="text-grey-800">
          选择你需要设计的内容，并输入你的要求，看看AI来帮你设计的LOGO。
          </p>
        )}
            <div className="flex justify-between items-center w-full flex-col mt-4">
              {restoredImage && (
                <div>
                  这是 <b>{roomNames.get(room)}</b> 按照{" "}
                  <b>{themeNames.get(theme)}</b> 风格的设计图!{" "}
                </div>
              )}
              <div
                className={`${
                  restoredLoaded ? "visible mt-6 -ml-8" : "invisible"
                }`}
              >

              </div>
              {status === "loading" ? (
                <div className="max-w-[670px] h-[250px] flex justify-center items-center">
                  <Rings
                    height="100"
                    width="100"
                    color="white"
                    radius="6"
                    wrapperStyle={{}}
                    wrapperClass=""
                    visible={true}
                    ariaLabel="rings-loading"
                  />
                </div>
              ) : (
                <>
                  <div className="space-y-4 w-full max-w-sm">
                    <div className="flex mt-3 items-center space-x-3">
                      <Image
                        src="/number-1-white.svg"
                        width={30}
                        height={30}
                        alt="1 icon"
                      />
                      <p className="text-left font-medium">
                        设计风格
                      </p>
                    </div>
                    <DropDown
                      theme={theme}
                      // @ts-ignore
                      setTheme={(newTheme) => setTheme(newTheme)}
                      themes={themes}
                      names={themeNames}
                    />
                  </div>
                  <div className="space-y-4 w-full max-w-sm">
                    <div className="flex mt-10 items-center space-x-3">
                      <Image
                        src="/number-2-white.svg"
                        width={30}
                        height={30}
                        alt="1 icon"
                      />
                      <p className="text-left font-medium">
                        图像处理大模型
                      </p>
                    </div>
                    <DropDown
                      theme={room}
                      // @ts-ignore
                      setTheme={(newRoom) => setRoom(newRoom)}
                      themes={rooms}
                    />
                  </div>
                  <div className="mt-4 w-full max-w-sm">
                    <div className="flex mt-6 w-96 items-center space-x-3">
                      <Image
                        src="/number-3-white.svg"
                        width={30}
                        height={30}
                        alt="1 icon"
                      />
                      <p className="text-left font-medium">
                        你的要求（公司或品牌名称、设计元素等）
                      </p>
                    </div>
                  </div>
                  <input id="iptPrompt" type="text"  
                    className="bg-white rounded-full text-black border font-medium px-4 py-2 hover:bg-gray-100 transition sm:mt-0 mt-2 w-full h-16" 
                    onChange={(e) => setValue(e.target.value)} />
                  <button
                    onClick={() => {
                      generatePhoto(""
                      );
                    }}
                    className="bg-blue-500 rounded-full text-white font-medium px-4 py-2 mt-8 hover:bg-blue-500/80 transition"
                  >
                    开始我的设计
                  </button>                   
                   
                 </>
              ) }
              
               {loading && (
                <div>
                  <button
                    disabled
                    className="bg-blue-500 rounded-full text-white font-medium px-4 pt-2 pb-3 mt-8 w-40"
                  >
                    <span className="pt-4">
                      <LoadingDots color="white" style="large" />
                    </span>
                  </button>
                  <div  className="border border-t-0 border-red-400 rounded-b bg-red-100 px-4 py-3 text-red-700">
                         服务器大概需要10-20秒处理，请耐心等待。
                  </div>
                 </div>
              )}
      
               {restoredImage && (
                <div className="flex sm:space-x-4 sm:flex-row flex-col">
                  <div className="sm:mt-0 mt-8">
                      <Image
                        alt="restored photo"
                        src={restoredImage}
                        className="rounded-2xl relative sm:mt-0 mt-2 w-full h-96"
                        width={768}
                        height={768}
                        onLoadingComplete={() => setRestoredLoaded(true)}
                      />
    
                  </div>
                </div>
              )}

           {error && (
                <div
                  className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl mt-8 max-w-[575px]"
                  role="alert"
                >
                  <div className="bg-red-500 text-white font-bold rounded-t px-4 py-2">
                    服务发生错误，请过一会再尝试...
                  </div>
                  <div className="border border-t-0 border-red-400 rounded-b bg-red-100 px-4 py-3 text-red-700">
                    {error}
                  </div>
                </div>
              )}
             </div>
      </main>
      <Footer />
    </div>
  );
};

export default Home;
