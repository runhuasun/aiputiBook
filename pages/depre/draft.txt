import { AnimatePresence, motion } from "framer-motion";
import { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import Link from "next/link";
import { CompareSlider } from "../components/CompareSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import LoadingDots from "../components/LoadingDots";
import ResizablePanel from "../components/ResizablePanel";
import Toggle from "../components/Toggle";
import appendNewToName from "../utils/appendNewToName";
import downloadPhoto from "../utils/downloadPhoto";
import DropDown from "../components/DropDown";
import { roomType, rooms, themeType, themes, themeNames, roomNames  } from "../utils/draftDropdownTypes";
import { GenerateResponseData } from "./api/generate";
import { useSession, signIn } from "next-auth/react";
import useSWR from "swr";
import { Rings } from "react-loader-spinner";
import { useRouter } from "next/router";
import { Toaster, toast } from "react-hot-toast";
import prisma from "../lib/prismadb";
import { getServerSession } from "next-auth";
import { authOptions } from "../pages/api/auth/[...nextauth]";
import { Room, User } from "@prisma/client";
import Genhis from "../components/Genhis";
import { config } from "../utils/config";
import LoginPage from "../components/LoginPage";
import Uploader, {mimeTypes} from "../components/Uploader";


export async function getServerSideProps(ctx: any) {
  const session = await getServerSession(ctx.req, ctx.res, authOptions);
  
  if (session && session.user  && session.user.email) {

    const user = await prisma.user.findUnique({
      where: {
        email: session.user.email!,
      },
      select: {
        id: true,
      },
    });

    let imghis = await prisma.room.findMany({
      where: {
          func: "draft",
          status: "SUCCESS",
          userId: user? user.id : "",
      },
      include: {
        user: true,
      }, 
     orderBy:     
     [
        { createdAt: 'desc', },       
      ],
    });

    return {
      props: {
        imghis,
        config
      },
    };
  }else{
    return {
      props: {
        config
      },
    };
  }
}

//const Home: NextPage = () => {
export default function draft({ imghis, config }: { imghis: (Room & { user: User; })[], config:any}) {

//const Home: NextPage = () => {
  const [originalPhoto, setOriginalPhoto] = useState<string | null>(null);
  const [restoredImage, setRestoredImage] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [restoredLoaded, setRestoredLoaded] = useState<boolean>(false);
  const [sideBySide, setSideBySide] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [photoName, setPhotoName] = useState<string | null>(null);
  const [theme, setTheme] = useState<themeType>("Modern");
  const [room, setRoom] = useState<roomType>("House");

  const fetcher = (url: string) => fetch(url).then((res) => res.json());
  const { data, mutate } = useSWR("/api/remaining", fetcher);
  const { data: session, status } = useSession();
 

  const UploadDropZone = () => (
      <Uploader 
          mime= {mimeTypes.image}   
          setFiles ={upfiles => {
              if (upfiles.length !== 0) {
                  setPhotoName(upfiles[0].originalName);
                  setOriginalPhoto(upfiles[0].uploadedUrl);
              }
          }}
          />      
  );

  const router = useRouter();
  // @ts-ignore
  let tizi = router.query.price ? parseInt(router.query.price) : 0;

  async function generatePhoto(fileUrl: string) {
    await new Promise((resolve) => setTimeout(resolve, 200));
    setLoading(true);
    const res = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ imageUrl: fileUrl, theme, room, inputText: roomNames.get(room) + "," + themeNames.get(theme), func: "draft", price: tizi }),
    });

    let response = (await res.json()) as GenerateResponseData;
    
    if (res.status !== 200) {
      setError(response as any);
    } else {
      mutate();
      const rooms =
        (JSON.parse(localStorage.getItem("rooms") || "[]") as string[]) || [];
      rooms.push(response.id);
      localStorage.setItem("rooms", JSON.stringify(rooms));
      setRestoredImage(response.generated);
    }
    setTimeout(() => {
      setLoading(false);
    }, 1300);
  }

  const windowTitle = "AI建筑渲染";

if(status == "authenticated"){
  
  return (
    <div className="flex mx-auto flex-col items-center justify-center min-h-screen">
      <Head>
          <title>{ windowTitle }</title>
          <meta property="og:title" content={  windowTitle } />
          <meta property="og:image" content="https://fileserver.aiputi.cn/sd_logo.jpg" /> 
      </Head>
      <Header config={config}/>
      <main>

        <h1 className="hidden sm:block title-main">
          从草图 <span className="title-light">生成</span> 效果图
        </h1>
        
         {status === "authenticated" && data && !restoredImage && (
          <p className="hidden sm:block text-gray-300">
            你还有{""}
            <span className="font-semibold text-gray-100">
              {data.remainingGenerations}
            </span>
            个{ config.creditName }，本次生成需要
            <span className="font-semibold text-gray-100">
              {tizi}
            </span>  
            个{ config.creditName }。
            {data.remainingGenerations < tizi && (
              <span className="font-semibold text-gray-300">
                购买更多{ config.creditName }
                <Link
                  href="/buy-credits"
                  className="font-semibold text-blue-100 underline underline-offset-2 hover:text-gray-100 transition"
                >
                  在这里
                </Link>
                .
              </span>
            )}
          </p>
        )}
        
            <div className="flex justify-between items-center w-full flex-col mt-4">
              {restoredImage && (
                <div>
                  这是你的 <b>{roomNames.get(room)}</b> 按照{" "}
                  <b>{themeNames.get(theme)}</b> 风格的效果图!{" "}
                </div>
              )}
              <div
                className={`${
                  restoredLoaded ? "visible mt-6 -ml-8" : "invisible"
                }`}
              >

              </div>
              {restoredLoaded && sideBySide && (
                <CompareSlider
                  original={originalPhoto!}
                  restored={restoredImage!}
                />
              )}
              { !restoredImage && (

                <>
                  <div className="space-y-4 w-full max-w-lg">
                    <div className="flex mt-3 items-center space-x-3">
                      <Image
                        src="/number-1-white.svg"
                        width={30}
                        height={30}
                        alt="1 icon"
                      />
                      <p className="text-left font-medium">
                        我喜欢的风格
                      </p>
                    </div>
                    <DropDown
                      theme={theme}
                      // @ts-ignore
                      setTheme={(newTheme) => setTheme(newTheme)}
                      themes={themes}
                      names={themeNames}
                    />
                  </div>
                  <div className="space-y-4 w-full max-w-lg">
                    <div className="flex mt-10 items-center space-x-3">
                      <Image
                        src="/number-2-white.svg"
                        width={30}
                        height={30}
                        alt="1 icon"
                      />
                      <p className="text-left font-medium">
                        我的建筑类型
                      </p>
                    </div>
                    <DropDown
                      theme={room}
                      // @ts-ignore
                      setTheme={(newRoom) => setRoom(newRoom)}
                      themes={rooms}
                      names={roomNames}
                    />
                  </div>
                  <div className="mt-4 w-full max-w-lg">
                    <div className="flex mt-6 w-96 items-center space-x-3">
                      <Image
                        src="/number-3-white.svg"
                        width={30}
                        height={30}
                        alt="1 icon"
                      />
                      <p className="text-left font-medium">
                        上传你的草图(.jpg/.jpeg）
                      </p>
                    </div>
                    <UploadDropZone />                    
                  </div>
                </>
              )}
              {originalPhoto && !restoredImage && (
                <Image
                  alt="original photo"
                  src={originalPhoto}
                  className="rounded-2xl  relative w-[768px]"
                  width={768}
                  height={768}
                />
              )}
              {restoredImage && originalPhoto && !sideBySide && (
                <div className="flex sm:space-x-4 sm:flex-row flex-col">
                  <div>
                    <h2 className="mb-1 font-medium text-lg">原来的草图</h2>
                    <Image
                      alt="original photo"
                      src={originalPhoto}
                      className="rounded-2xl relative w-[768px] "
                      width={768}
                      height={768}
                    />
                  </div>
                  <div className="sm:mt-0 mt-8">
                    <h2 className="mb-1 font-medium text-lg">AI生成效果图</h2>

                      <Image
                        alt="restored photo"
                        src={restoredImage}
                        className="rounded-2xl relative w-[768px] "
                        width={768}
                        height={768}
                        onLoadingComplete={() => setRestoredLoaded(true)}
                      />
    
                  </div>
                </div>
              )}
              {loading && (
                <div>
                  <button
                    disabled
                    className="button-main px-4 pt-2 pb-3 mt-8 w-40"
                  >
                    <span className="pt-4">
                      <LoadingDots color="white" style="large" />
                    </span>
                  </button>
                  <div  className="border border-t-0 border-red-400 rounded-b px-4 py-3 text-red-700">
                         服务器大概需要10-20秒处理，请耐心等待。
                  </div>
                 </div>
              )}
              {error && (
                <div
                  className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl mt-8 max-w-[575px]"
                  role="alert"
                >
                  <div className="bg-red-500 text-white font-bold rounded-t px-4 py-2">
                    错误
                  </div>
                  <div className="border border-t-0 border-red-400 rounded-b bg-red-100 px-4 py-3 text-red-700">
                    {error}
                  </div>
                </div>
              )}
              <div className="flex space-x-2 justify-center">
                {originalPhoto && restoredLoaded && !loading && !error && (
                  <button
                    onClick={() => {
                   //   setOriginalPhoto(null);
                      setRestoredImage(null);
                      setRestoredLoaded(false);
                      setError(null);
                    }}
                    className="button-main px-4 py-2 mt-8"
                  >
                    开始新的设计
                  </button>
                )}
                {restoredLoaded && (
                  <button
                    onClick={() => {
                      downloadPhoto(
                        restoredImage!,
                        appendNewToName(photoName!)
                      );
                    }}
                    className="button-main px-4 py-2 mt-8"
                  >
                    下载效果图
                  </button>
                ) }
                {!restoredLoaded && !loading && originalPhoto &&  (
                  <button
                    onClick={() => {
                      generatePhoto(originalPhoto);
                    }}
                    className="button-gold px-4 py-2 mt-8"
                  >
                    开始设计
                  </button>
      
                )}
              </div>
            </div>
        <Toaster position="top-center" reverseOrder={false} />

        <Genhis imghis={imghis} />

      </main>
      <Footer />
    </div>
  );
  
  }else{
    return(
      <LoginPage config={config}/>
        );
  }  

  
};

//export default Home;
