import { AnimatePresence, motion } from "framer-motion";
import { NextPage } from "next";
import Link from "next/link";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import React from 'react';

import Footer from "../components/Footer";
import Header from "../components/Header";
import LoadingDots from "../components/LoadingDots";
import Toggle from "../components/Toggle";
import { GenerateResponseData } from "./api/generate";
import { useSession, signIn } from "next-auth/react";
import useSWR from "swr";
import { Rings } from "react-loader-spinner";
import { useRouter } from "next/router";
import { authOptions } from "../pages/api/auth/[...nextauth]";
import prisma from "../lib/prismadb";
import { Room, User } from "@prisma/client";
import { getServerSession } from "next-auth";
import { Toaster, toast } from "react-hot-toast";
import {publicRoom} from "../components/Genhis";
import { config } from "../utils/config";
import LoginPage from "../components/LoginPage";
import * as ru from "../utils/restUtils";


export async function getServerSideProps(ctx: any) {
  let roomId = ctx?.query?.roomId;
  let image = await prisma.room.findUnique({
    where: {
        id: roomId,
    },
    select: {
      id: true,
      userId: true,
      func: true,
      model: true,
      inputImage: true,
      outputImage: true,
      prompt: true,
      viewTimes: true,
      dealTimes: true,
      usedCredits: true,
    },
  });

  let author = await prisma.user.findUnique({
    where: {
      id: image? image.userId : "",
    },
  });

  return {
    props: {
      image,
      author,
      config
    },
  };
}  

export default function mangheShare({ image, author, config  }: { image : Room, author: User, config: any }) {


  const [error, setError] = useState<string | null>(null);
  const [photoName, setPhotoName] = useState<string | null>(null);

  const fetcher = (url: string) => fetch(url).then((res) => res.json());
  const { data, mutate } = useSWR("/api/remaining", fetcher);
  const { data: session, status } = useSession();
  
  
  
  async function share(){
    // 检查浏览器是否支持Web Share API
    if (navigator.share) {
      try {
        // 调用navigator.share()方法并传入要分享的数据
        await navigator.share({
          title: "大家一起拆AI盲盒",
          text: "看看我在AI盲盒里拆到的惊喜",
          url: "/mangheShare?roomId=" + image.id + (data.currentUserId? ("&inviteBy=" + data.currentUserId) : ""),
        });
      } catch (error) {
        // 如果分享失败，打印一个错误
        console.error("Share failed", error);
       alert('请点击右上角浏览器的"..." 按钮，通过浏览器分享。');
      }
    } else {
      // 如果浏览器不支持Web Share API，打印一个警告
      alert('请点击右上角浏览器的"..." 按钮，通过浏览器分享。');
    }
    
  }


if(status == "authenticated"){
  
  return (
    <div className="flex mx-auto flex-col items-center justify-center min-h-screen bg-gifts ">
      <Head>
        <title>一起拆AI盲盒</title>
          <meta property="og:description" content={"看看我在AI盲盒里拆到的惊喜"} /> 
          <meta property="og:title" content="一起拆AI盲盒" />
          <meta property="og:image" content={image.outputImage} />    
          <meta name="description" content={"看看我在AI盲盒里拆到的惊喜"} />        
      </Head>
      <Header config={config}/>
      
      <main>
       <div className = "text-white rounded-2xl bg-black opacity-80  py-5 px-2 w-4/5">
          <h1 className="mx-auto max-w-3xl font-display text-2xl font-bold tracking-normal text-white sm:text-3xl mb-5">
            “<span className="text-main">{author.name}</span>”拆到的盲盒
          </h1>
          <p className=" sm:px-2 px-1 sm:py-2 py-1">
          选择一个愿望，开出独一无二的惊喜！
          </p>
        </div>
        
            <div className="flex justify-between items-center w-full flex-col mt-2">

        
               {image && image.outputImage && (
               <>
              
                <div className="flex sm:space-x-4 sm:flex-row flex-col pt-0">
                  <div className="sm:mt-0 mt-0">
                     <Link href={ru.getImageRest(image.id)} target="_blank">
                    
                      <Image
                        alt="盲盒礼物"
                        src={image.outputImage}
                        className=" relative sm:mt-0 mt-0"
                        width={512}
                        height={512}
                      />
                    </Link>
                    <div className="flex space-x-8 justify-center">
                       
                      <button
                        onClick={() => {
                          share();
                        }}
                        className="button-main rounded-full text-lg text-white font-medium px-4 py-2 mt-8 hover:bg-blue-500/80 transition"
                      >
                        分享朋友(得提子)
                      </button>  

                      <button
                        onClick={() => {
                          window.location.href="/manghe" + (data.currentUserId? ("?inviteBy=" + data.currentUserId) : "");
                        }}
                        className="button-main rounded-full text-lg text-white font-medium px-4 py-2 mt-8 hover:bg-blue-500/80 transition"
                      >
                        我也要拆盲盒
                      </button>  
                      
                    </div>
                  </div>
                </div>
              
               </>
              )}
             </div>

        <Toaster position="top-center" reverseOrder={false} />

      </main>
    </div>
  );

  }else{
    return(
      <LoginPage config={config}/>
        );
  }  
};


