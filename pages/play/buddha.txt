import { AnimatePresence, motion } from "framer-motion";
import { NextPage } from "next";
import Link from "next/link";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import React from 'react';
import TextareaAutosize from "react-textarea-autosize";

import Footer from "../components/Footer";
import BuddhaHeader from "../components/BuddhaHeader";
import LoadingDots from "../components/LoadingDots";
import ResizablePanel from "../components/ResizablePanel";
import Toggle from "../components/Toggle";
import {hasSensitiveWord} from "../utils/sensitiveWords";

import { GenerateResponseData } from "./api/generate";
import { useSession, signIn } from "next-auth/react";
import useSWR from "swr";
import { Rings } from "react-loader-spinner";
import { useRouter } from "next/router";
import { authOptions } from "../pages/api/auth/[...nextauth]";
import prisma from "../lib/prismadb";
import { Room, Prompt, User } from "@prisma/client";
import { getServerSession } from "next-auth";
import {parseParams, replaceParam, replaceKeyValues, checkSyntax} from "../utils/formularTools";
import { Toaster, toast } from "react-hot-toast";
import Genhis  from "../components/Genhis";
import {publicRoom} from "../components/Genhis";
import { config } from "../utils/config";
import { log, warn, error } from "../utils/debug";
import LoginPage from "../components/LoginPage";
import * as ru from "../utils/restUtils";


export async function getServerSideProps(ctx: any) {
    return {
     props:{ 
       config
     }
    };
  
}


export default function buddha({ config }: { config:any } ) {
  
  const [restoredImage, setRestoredImage] = useState<string | null>(null);
  const [restoredId, setRestoredId] = useState<string | null>(null);
  
  const [loading, setLoading] = useState<boolean>(false);
  const [restoredLoaded, setRestoredLoaded] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [photoName, setPhotoName] = useState<string | null>(null);

  const fetcher = (url: string) => fetch(url).then((res) => res.json());
  const { data, mutate } = useSWR("/api/remaining", fetcher);
  const { data: session, status } = useSession();
 
  
  const router = useRouter();
  let tizi = router.query.price;

  async function share(){
    // 检查浏览器是否支持Web Share API
    if (navigator.share) {
      try {
        // 调用navigator.share()方法并传入要分享的数据
        const u = "/buddhaShare?roomId=" + restoredId + (data.currentUserId? ("&inviteBy=" + data.currentUserId) : "");
        await navigator.share({
          title: "每日迎请一尊佛",
          text: "普渡众生，积功累德，阿弥陀佛",
          url: u,
        });
      } catch (error) {
        // 如果分享失败，打印一个错误
        console.error("Share failed", error);
      }
    } else {
      // 如果浏览器不支持Web Share API，打印一个警告
      alert('请点击右上角浏览器的"..." 按钮，通过浏览器分享。');
    }
    
  }
    

  
  type Box = {
    want: string;
    call: {func:string, model:string, theme:string, formular:string }[];
    prompt: string[];
  };
    
  const hotBoxes:Box[] = [
    {
      want: "阖家安康", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，端坐在庄严的庙宇中，冥想，微笑",
             ],
   },  
    {
      want: "财源亨通", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，端坐在水面上，打坐，微笑",
             ],
   },  
    {
      want: "祛病消灾", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，端坐在蓝天白云间，打坐，微笑",
             ],
   },    
    {
      want: "兴旺发达", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛坐山顶上，旭日东升，瀑布",
             ],
   },     
    {
      want: "福寿安康", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛坐山顶上，旭日东升，瀑布",
             ],
   },  
    {
      want: "吉祥如意", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，端坐在蓝天白云间，旭日东升，微笑",
             ],
   },   
    {
      want: "学业有成", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，端坐在蓝天白云间，旭日东升，微笑",
             ],
   },   
    {
      want: "早生贵子", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，端坐在水面上，打坐，微笑",
             ],
   },      
    {
      want: "求好姻缘", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，端坐在水面上，打坐，微笑",
             ],
   },   
    {
      want: "升职加薪", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，端坐在水面上，打坐，微笑",
             ],
   },     
    {
      want: "一路平安", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛坐山顶上，旭日东升，瀑布",
             ],
   },        
    {
      want: "福慧绵长", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛，在庄严的庙宇中，打坐，微笑",
             ],
   },      
    {
      want: "戒贪嗔痴", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛在庄严的庙宇中，冥想，微笑",
             ],
   },   
    {
      want: "积功累德", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛在庄严的庙宇中，冥想，微笑",
             ],
   },  
    {
      want: "修成正觉", 
      call: [ 
              {func: "lora", model:"fozu_v1", theme:"FACE", formular:""},
            ], 
      prompt: [
               "一尊佛静坐在菩提树下，冥想，微笑",
             ],
   },    
 ];
/*    
  const wishes:string[] = [
    "阖家安康",
    "财源亨通",
    "祛病消灾",
    "兴旺发达",
    "福寿安康",
    "吉祥如意",
    "学业有成",
    "早生贵子",
    "求好姻缘",
    "升职加薪",
    "一路平安",
    "福慧绵长",
    "戒贪嗔痴",
    "积功累德",
    "修成正觉",
 ];
*/    

 const [boxChoice, setBoxChoice] = useState<Box>(hotBoxes[0]);
 // const [wish, setWish] = useState<string>(wishes[0]);

    
    
  async function openBox(){
    if(boxChoice == null){
      alert("请先告诉佛，你的心愿是什么？");
      return;
    }    
    const calls = boxChoice.call.length;
    const prompts = boxChoice.prompt.length;
    const randomCall = Math.floor(Math.random() * (calls-1));
    const randomPrompt = Math.floor(Math.random() * (prompts-1));
    const prompt = boxChoice.prompt[randomPrompt]; //  + "，说：‘" + wish + "’";
    const foshuo = "佛说：" + boxChoice.want + "，所求皆遂愿";
    await generatePhoto(boxChoice.call[randomCall].func, boxChoice.call[randomCall].model,
        boxChoice.call[randomCall].theme, prompt, foshuo,
        boxChoice.call[randomCall].formular);
  }
    
    
  async function generatePhoto(func:string, model:string, theme:string, prompt:string, want:string, formular:string) {
    
    let realText = prompt;
    
    if(model != "lora" && formular.trim() != ""){
      realText = formular;
   
      const params = parseParams(formular);

      if(params.length >0){
        realText = replaceParam(realText, params[0][0], prompt);
      }
      if(params.length >1){
        realText = replaceParam(realText, params[1][0], " ");
      }
      if(params.length >2){
        realText = replaceParam(realText, params[2][0], " ");
      }    
    }
    
    setError(null);
 
    await new Promise((resolve) => setTimeout(resolve, 200));
    setLoading(true);
    const res = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ imageUrl:"", theme:theme, room:"realistic", realText:realText, inputText:want, func:func, modelurl:model, modelTheme:theme, price: 10 , access:"PRIVATE"}), // 目前提示词实验室每次收费2，图片缺省隐藏
    });

    let response = (await res.json()) as GenerateResponseData;
    if (res.status !== 200) {
      setError(response as any);
    } else {
      mutate();
      setRestoredImage(response.generated);
      setRestoredId(response.genRoomId);   
    }
    setTimeout(() => {
      setLoading(false);
    }, 1300);
  }

  if(status == "authenticated"){
   
  return (
    <div className="flex mx-auto flex-col items-center justify-center min-h-screen bg-buddha ">
      <Head>
        <title>每日请佛</title>
          <meta property="og:description" content={"我在这里见到了心中的佛！"} /> 
          <meta property="og:title" content="每日迎请一尊佛" />
          <meta property="og:image" content={restoredImage? restoredImage : `${config.RS}/icon/buddha.jpg`} />    
          <meta name="description" content={"我在这里遇到了心中的佛！"} />        
      </Head>
      
      <main className="flex flex-1 flex-col sm:mb-0 mb-40">
      {restoredImage ? (
        
       <div className = "text-white rounded-2xl bg-black opacity-80  py-5 px-2 w-4/5">
          <h1 className="mx-auto max-w-3xl font-display title-main mb-4">
            <span className="title-light">佛说：</span>愿所求皆遂愿
          </h1>
       </div>

         ) : (
        
       <div className = "text-white rounded-2xl bg-black opacity-80  py-5 px-2 w-4/5">
        
          <h1 className="mx-auto max-w-3xl font-display text-3xl font-bold tracking-normal text-white sm:text-4xl mb-4">
            迎请<span className="text-main">佛祖</span>现身
          </h1>
          <p className=" sm:px-2 px-1 sm:py-2 py-1">
          说出此刻的愿望，遇见心中独一无二的佛！
          </p>
         
        </div>
      )}
        
            <div className="flex justify-between items-center w-full flex-col mt-1">

                
                  <div className="space-y-4 w-full mb-5">
                      <div className="w-full flex flex-wrap space-x-2  justify-center">
                      { !restoredImage && hotBoxes && hotBoxes.map((box) => (
                        <button className={box.want == boxChoice.want ? 'button-main px-4 py-2 mb-4 text-lg' : 'button-dark px-4 py-2 mb-4 text-lg'}    
                                onClick={() => {
                                  setBoxChoice( box );
                                }} 
                        >
                          {box.want}
                        </button>
                      ))}                        
                      </div>
                  </div> 

              
              {loading ? (
                <div className= "flex flex-col items-center ">
                  <button
                    disabled
                          className="button-main w-4/5 rounded-full text-white text-lg px-4 py-2 mt-4 mb-5"
                  >
                    <span className="pt-4">
                      <LoadingDots color="white" style="large" />
                    </span>
                  </button>
                  <div  className="text-white bg-black opacity-80 px-2 py-2 w-4/5">
                         请佛需要诚心静候30-60秒，请默念心中愿望。南无阿弥陀佛...... 
                  </div>
                 </div>
              ):(
                <div className= "flex flex-col items-center">
                    {!restoredImage && (
                        <button
                        onClick={() => {
                            openBox();
                          }}
                          className="button-gold w-4/5 rounded-full text-white text-lg px-4 py-2 mt-4 mb-5"
                        >
                        迎请心中佛祖
                      </button>    
                  )}                  
                    {status === "authenticated" && data && !restoredImage && (
                      <p className="text-white bg-black opacity-80 px-2 py-2">
                        请佛每次需要2-10颗菩提子，
                        <span className="font-semibold text-gray-200">
                          你还有{data.remainingGenerations}颗菩提子。
                        </span>
                        {data.remainingGenerations < 10 && (
                          <>
                            <span>
                              购买更多菩提子
                              <Link
                                href="/buy-credits"
                                className="font-semibold text-gray-100 underline underline-offset-2 hover:text-gray-200 transition" >
                                在这里
                              </Link>
                            </span>
                          </>
                        )}
                      </p>
                    )}     
                  
                </div>
              )
              }

              
               {restoredImage && restoredId && (
               <>
              
                <div className="flex sm:space-x-4 sm:flex-row flex-col pt-0">
                  <div className="sm:mt-0 mt-0">
                     <Link href={ru.getImageRest(restoredId)} target="_blank">
                        <Image
                          alt="restored photo"
                          src={restoredImage}
                          className=" relative sm:mt-0 mt-0"
                          width={512}
                          height={512}
                          onLoadingComplete={() => setRestoredLoaded(true)}
                        />
                    </Link>   
                    
                    <div className="flex space-x-8 justify-center">
                       
                      <button
                        onClick={() => {
                          share();
                        }}
                        className="button-main rounded-full text-lg text-white font-medium px-4 py-2 mt-8 hover:bg-blue-500/80 transition"
                      >
                        普渡众生
                      </button>  

                      <button
                        onClick={() => {
                          window.location.reload();
                        }}
                        className="button-main rounded-full text-lg text-white font-medium px-4 py-2 mt-8 hover:bg-blue-500/80 transition"
                      >
                        再请一次
                      </button>  
                      
                    </div>
                  </div>
                </div>
              
               </>
              )}

              {error && (
                <div
                  className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl mt-8 max-w-[575px]"
                  role="alert"
                >
                  <div className="bg-green-500 text-white font-bold rounded-t px-4 py-2">
                    菩提说
                  </div>
                  <div className="border border-t-0 border-green-400 rounded-b bg-green-100 px-4 py-3 text-gray-700">
                    {error}
                  </div>
                </div>
              )}
             </div>
        <Toaster position="top-center" reverseOrder={false} />

      </main>
    </div>
  );
  }else{
    return(
      <LoginPage config={config}/>
        );
  }

};

